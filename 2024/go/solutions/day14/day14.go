package day14

import (
	"andrewsaputra/adventofcode2024/helper"
	"fmt"
	"strings"
)

func Solve() {
	res1 := solvePart1("inputs/day14.txt")
	fmt.Println("Part 1:", res1)

	res2 := solvePart2("inputs/day14.txt")
	fmt.Println("Part 2:", res2)
}

func solvePart1(path string) int {
	numRows, numCols := 103, 101
	midRow, midCol := numRows/2, numCols/2
	seconds := 100

	var q1, q2, q3, q4 int
	for _, line := range helper.ReadLines(path) {
		var pRow, pCol, vRow, vCol int
		fmt.Sscanf(line, "p=%d,%d v=%d,%d", &pCol, &pRow, &vCol, &vRow)

		row := pRow + seconds*vRow
		if row < 0 {
			div := -1 * row / numRows
			row += (div + 1) * numRows
		}
		row %= numRows

		col := pCol + seconds*vCol
		if col < 0 {
			div := -1 * col / numCols
			col += (div + 1) * numCols
		}
		col %= numCols

		if row == midRow || col == midCol {
			continue
		}

		if row < midRow {
			if col < midCol {
				q1++
			} else {
				q2++
			}
		} else {
			if col < midCol {
				q3++
			} else {
				q4++
			}
		}
	}

	return q1 * q2 * q3 * q4
}

func solvePart2(path string) int {
	numRows, numCols := 103, 101
	var items []Item
	for _, line := range helper.ReadLines(path) {
		var pRow, pCol, vRow, vCol int
		fmt.Sscanf(line, "p=%d,%d v=%d,%d", &pCol, &pRow, &vCol, &vRow)

		items = append(items, Item{
			Row:  pRow,
			Col:  pCol,
			vRow: vRow,
			vCol: vCol,
		})
	}

	var seconds int64
	for {
		for idx, item := range items {
			row := item.Row + item.vRow
			if row < 0 {
				row += numRows
			}
			row %= numRows

			col := item.Col + item.vCol
			if col < 0 {
				col += numCols
			}
			col %= numCols

			items[idx].Row = row
			items[idx].Col = col
		}

		seconds++

		if hasChristmasLine(numRows, numCols, items, true) {
			break
		}
	}

	return int(seconds)
}

type Item struct {
	Row  int
	Col  int
	vRow int
	vCol int
}

/*
.................##............................................#...#.................................
.................................................#...................................................
.....................................................................................................
........................###############################..............................................
...............#........#.............................#..............................................
........................#.............................#........................#.....................
..............#.........#.............................#..............................................
........................#.............................#..............................................
........................#..............#..............#..........................#...#...............
........................#.............###.............#......................#.......................
......#.................#............#####............#..............................................
........................#...........#######...........#...................#..........................
.......#............#...#..........#########..........#.............................................#
........................#............#####............#..............................................
.#......................#...........#######...........#...................................#..........
........................#..........#########..........#.....................#........................
........................#.........###########.........#..............................................
........................#........#############........#..............................................
........................#..........#########..........#..............................................
......#.................#.........###########.........#....................................#........#
........................#........#############........#..............................................
...........#............#.......###############.......#..............................................
........................#......#################......#..............................................
........................#........#############........#..............................................
........................#.......###############.......#..............................................
........................#......#################......#..#...........................................
........................#.....###################.....#...........................................#..
........................#....#####################....#..................#..#........................
........................#.............###.............#..............................................
........................#.............###.............#..............................................
........................#.............###.............#........................................#.....
.#......................#.............................#..#...........................................
....#...................#.............................#............#.................................
......#.....#...........#.............................#.......................#......................
........................#.............................#..............................#...............
........................###############################.................#............................
........................................................................#............................
......................................#..........................#...................................
.............................................................................................#.......
*/
func hasChristmasLine(numRows int, numCols int, items []Item, drawMatrix bool) bool {
	var sb strings.Builder
	for col := 0; col < numCols; col++ {
		sb.WriteByte('.')
	}

	matrix := make([][]byte, numRows)
	for row := range matrix {
		matrix[row] = []byte(sb.String())
	}

	for _, item := range items {
		matrix[item.Row][item.Col] = '#'
	}

	for row := range matrix {
		if strings.Contains(string(matrix[row]), "##########") {
			if drawMatrix {
				for row2 := range matrix {
					fmt.Println(string(matrix[row2]))
				}
			}
			return true
		}
	}

	return false
}
